[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IConfiguration _configuration;

    public UserController(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    [HttpPost("upload-image")]
    public async Task<IActionResult> UploadImage([FromForm] ImageUploadRequest request)
    {
        if (request.ImageFile == null || request.ImageFile.Length == 0)
        {
            return BadRequest("No image file provided.");
        }

        try
        {
            // Convert the uploaded image file to a byte array
            byte[] imgBytes;
            using (var ms = new MemoryStream())
            {
                await request.ImageFile.CopyToAsync(ms);
                imgBytes = ms.ToArray();
            }

            // Update the database with ImgName and ImgSize
            string connectionString = _configuration.GetConnectionString("DefaultConnection");
            using (var connection = new SqlConnection(connectionString))
            {
                string query = @"
                    UPDATE [User]
                    SET ImgName = @ImgName, ImgSize = @ImgSize
                    WHERE UserId = @UserId";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@UserId", request.UserId);
                    command.Parameters.AddWithValue("@ImgName", request.ImgName ?? (object)DBNull.Value);
                    command.Parameters.AddWithValue("@ImgSize", imgBytes ?? (object)DBNull.Value);

                    connection.Open();
                    int rowsAffected = await command.ExecuteNonQueryAsync();
                    connection.Close();

                    if (rowsAffected > 0)
                    {
                        return Ok("Image uploaded and stored successfully.");
                    }
                    else
                    {
                        return NotFound("User not found.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }
}
